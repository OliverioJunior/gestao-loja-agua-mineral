generator client {
  provider = "prisma-client-js"
  output   = "../src/infrastructure/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  role      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientesCriados     Cliente[] @relation("ClienteCreatedBy")
  clientesAtualizados Cliente[] @relation("ClienteUpdatedBy")

  produtosCriados     Produto[] @relation("ProdutoCreatedBy")
  produtosAtualizados Produto[] @relation("ProdutoUpdatedBy")

  categoriasCriadas     Categoria[] @relation("CategoriaCreatedBy")
  categoriasAtualizadas Categoria[] @relation("CategoriaUpdatedBy")

  pedidosCriados     Pedido[] @relation("PedidoCreatedBy")
  pedidosAtualizados Pedido[] @relation("PedidoUpdatedBy")

  itensCriados     Item[] @relation("ItemCreatedBy")
  itensAtualizados Item[] @relation("ItemUpdatedBy")
}

model Produto {
  id            String   @id @default(uuid()) @db.Uuid
  nome          String   @db.VarChar(255)
  descricao     String?  @db.Text
  marca         String?  @db.VarChar(100)
  precoCusto    Int
  precoVenda    Int
  precoRevenda  Int?
  precoPromocao Int?
  quantidade    Int      @default(0)
  estoqueMinimo Int?     @default(0)
  ativo         Boolean  @default(true)
  promocao      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  categoriaId String?    @db.Uuid

  Item Item[]

  criadoPor   User   @relation("ProdutoCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("ProdutoUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid

  @@index([nome])
  @@index([marca])
  @@index([ativo])
  @@index([promocao])
}

model Categoria {
  id            String   @id @default(uuid()) @db.Uuid
  nome          String   @db.VarChar(255)
  description   String?  @db.Text
  productsCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  produtos Produto[]

  criadoPor   User   @relation("CategoriaCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("CategoriaUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid
}

enum Status {
  ATIVO
  INATIVO
}

model Cliente {
  id          Int       @id @default(autoincrement())
  nome        String    @db.VarChar(200)
  aniversario DateTime? @db.Date
  email       String    @unique @db.VarChar(200)
  telefone    String    @unique @db.VarChar(16)
  endereco    String    @db.Text
  status      Status    @default(ATIVO)
  cidade      String    @db.VarChar(200)
  estado      String    @db.VarChar(200)
  cep         String    @map("CEP") @db.VarChar(10)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  Pedido Pedido[]

  criadoPor   User   @relation("ClienteCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("ClienteUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid

  @@map("clientes")
}

enum StatusPedido {
  CANCELADO
  ENTREGUE
  PENDENTE
}

model Pedido {
  id        Int          @id @default(autoincrement())
  cliente   Cliente      @relation(fields: [clienteId], references: [id])
  clienteId Int
  data      DateTime     @default(now())
  total     Int
  status    StatusPedido @default(PENDENTE)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  itens Item[]

  criadoPor   User   @relation("PedidoCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("PedidoUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid
}

model Item {
  id         Int      @id @default(autoincrement())
  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  String   @db.Uuid
  quantidade Int
  preco      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  criadoPor   User   @relation("ItemCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("ItemUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid
}
