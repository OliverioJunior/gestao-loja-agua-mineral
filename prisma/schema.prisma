generator client {
  provider = "prisma-client-js"
  output   = "../src/infrastructure/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StatusPedido {
  PENDENTE
  CONFIRMADO
  ENTREGUE
  CANCELADO
}

enum Status {
  ATIVO
  INATIVO
}

enum CategoriaDespesa {
  OPERACIONAL
  ADMINISTRATIVA
  MARKETING
  MANUTENCAO
  TRANSPORTE
  FORNECEDORES
  IMPOSTOS
  OUTRAS
}

enum FormaPagamentoDespesa {
  DINHEIRO
  PIX
  CARTAO_DEBITO
  CARTAO_CREDITO
  TRANSFERENCIA
  BOLETO
  CHEQUE
}

enum FormaPagamentoCompra {
  DINHEIRO
  PIX
  CARTAO_DEBITO
  CARTAO_CREDITO
  TRANSFERENCIA
  BOLETO
  CHEQUE
  PRAZO
}

enum StatusCompra {
  PENDENTE
  CONFIRMADA
  RECEBIDA
  CANCELADA
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  role      String   @db.VarChar(50)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos de auditoria - criação
  clientesCriados         Cliente[]    @relation("ClienteCreatedBy")
  produtosCriados         Produto[]    @relation("ProdutoCreatedBy")
  categoriasCriadas       Categoria[]  @relation("CategoriaCreatedBy")
  pedidosCriados          Pedido[]     @relation("PedidoCreatedBy")
  itensCriados            Item[]       @relation("ItemCreatedBy")
  vendasCriadas           Vendas[]     @relation("VendasCreatedBy")
  fornecedoresCriados     Fornecedor[] @relation("FornecedorCreatedBy")
  comprasCriadas          Compra[]     @relation("CompraCreatedBy")
  itensCompraCriados      ItemCompra[] @relation("ItemCompraCreatedBy")
  // Relacionamentos de auditoria - atualização
  clientesAtualizados     Cliente[]    @relation("ClienteUpdatedBy")
  produtosAtualizados     Produto[]    @relation("ProdutoUpdatedBy")
  categoriasAtualizadas   Categoria[]  @relation("CategoriaUpdatedBy")
  pedidosAtualizados      Pedido[]     @relation("PedidoUpdatedBy")
  itensAtualizados        Item[]       @relation("ItemUpdatedBy")
  despesasCriadas         Despesa[]    @relation("DespesaCreatedBy")
  despesasAtualizadas     Despesa[]    @relation("DespesaUpdatedBy")
  vendasAtualizadas       Vendas[]     @relation("VendasUpdatedBy")
  fornecedoresAtualizados Fornecedor[] @relation("FornecedorUpdatedBy")
  comprasAtualizadas      Compra[]     @relation("CompraUpdatedBy")
  itensCompraAtualizados  ItemCompra[] @relation("ItemCompraUpdatedBy")

  @@map("users")
}

model Produto {
  id            String       @id @default(uuid()) @db.Uuid
  nome          String       @db.VarChar(255)
  descricao     String?      @db.Text
  marca         String?      @db.VarChar(100)
  precoCusto    Int          @map("preco_custo")
  precoVenda    Int          @map("preco_venda")
  precoRevenda  Int?         @map("preco_revenda")
  precoPromocao Int?         @map("preco_promocao")
  estoque       Int          @default(0)
  estoqueMinimo Int?         @default(0) @map("estoque_minimo")
  ativo         Boolean      @default(true)
  promocao      Boolean      @default(false)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  // Relacionamentos
  categoria     Categoria?   @relation(fields: [categoriaId], references: [id])
  categoriaId   String?      @map("categoria_id") @db.Uuid
  Item          Item[]
  itensCompra   ItemCompra[]

  // Auditoria
  criadoPor       User   @relation("ProdutoCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String @map("criado_por_id") @db.Uuid
  atualizadoPor   User   @relation("ProdutoUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @map("atualizado_por_id") @db.Uuid

  @@index([nome])
  @@index([marca])
  @@index([ativo])
  @@index([promocao])
  @@index([categoriaId])
  @@map("produtos")
}

model Categoria {
  id            String   @id @default(uuid()) @db.Uuid
  nome          String   @db.VarChar(255)
  description   String?  @db.Text
  productsCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  produtos Produto[]

  criadoPor   User   @relation("CategoriaCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId String @db.Uuid

  atualizadoPor   User   @relation("CategoriaUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String @db.Uuid

  @@index([nome])
  @@map("categorias")
}

model Cliente {
  id          String    @id @default(uuid()) @db.Uuid
  nome        String    @db.VarChar(255)
  aniversario DateTime? @db.Date
  email       String    @unique @db.VarChar(255)
  telefone    String    @unique @db.VarChar(20)
  status      Status    @default(ATIVO)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  pedidos  Pedido[]
  vendas   Vendas[]
  endereco Endereco? @relation(fields: [enderecoId], references: [id])

  // Auditoria
  criadoPor       User?   @relation("ClienteCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String? @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("ClienteUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid
  enderecoId      String? @unique @map("endereco_id") @db.Uuid

  @@index([email])
  @@index([telefone])
  @@index([status])
  @@map("clientes")
}

enum TiposEndereco {
  RESIDENCIAL
  COMERCIAL
  APARTAMENTO
  OUTRO
}

model Endereco {
  id          String        @id @default(uuid()) @db.Uuid
  clienteId   String        @db.Uuid
  logradouro  String        @db.VarChar(255)
  numero      String        @db.VarChar(10)
  complemento String?       @db.VarChar(100)
  bairro      String        @db.VarChar(100)
  cidade      String        @db.VarChar(100)
  estado      String        @db.VarChar(2)
  cep         String        @db.VarChar(9)
  tipo        TiposEndereco @default(RESIDENCIAL)
  principal   Boolean       @default(false)

  Pedido  Pedido[]
  Cliente Cliente?

  @@unique([logradouro, numero, cidade, bairro, clienteId])
  @@index([clienteId])
  @@index([cep])
}

model Pedido {
  id             String       @id @default(uuid()) @db.Uuid
  clienteId      String       @map("cliente_id") @db.Uuid
  dataEntrega    DateTime?    @map("data_entrega")
  total          Int
  desconto       Int?
  formaPagamento String       @default("dinheiro")
  taxaEntrega    Int?         @map("taxa_entrega")
  status         StatusPedido @default(PENDENTE)
  observacoes    String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  cliente         Cliente?  @relation(fields: [clienteId], references: [id])
  itens           Item[]
  vendas          Vendas[]
  endereco        Endereco? @relation(fields: [enderecoId], references: [id])
  enderecoId      String?   @map("endereco_id") @db.Uuid
  // Auditoria
  criadoPor       User      @relation("PedidoCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String    @map("criado_por_id") @db.Uuid
  atualizadoPor   User?     @relation("PedidoUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String?   @map("atualizado_por_id") @db.Uuid

  @@index([clienteId])
  @@index([status])
  @@index([dataEntrega])
  @@map("pedidos")
}

model Item {
  id         String   @id @default(uuid()) @db.Uuid
  pedidoId   String?  @map("pedido_id") @db.Uuid
  produtoId  String   @map("produto_id") @db.Uuid
  quantidade Int
  preco      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  pedido  Pedido?  @relation(fields: [pedidoId], references: [id])
  produto Produto? @relation(fields: [produtoId], references: [id])

  // Auditoria
  criadoPor       User    @relation("ItemCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("ItemUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([pedidoId])
  @@index([produtoId])
  @@map("itens")
}

enum StatusVenda {
  QUITADO
  EM_ABERTO
}

model Vendas {
  id        String      @id @default(uuid()) @db.Uuid
  clienteId String      @map("cliente_id") @db.Uuid
  pedidoId  String      @map("pedido_id") @db.Uuid
  data      DateTime    @default(now())
  total     Int
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  status    StatusVenda @default(QUITADO)
  // Relacionamentos
  cliente   Cliente     @relation(fields: [clienteId], references: [id])
  pedido    Pedido      @relation(fields: [pedidoId], references: [id])

  // Auditoria
  criadoPor       User    @relation("VendasCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("VendasUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([clienteId])
  @@index([pedidoId])
  @@index([data])
  @@map("vendas")
}

model Despesa {
  id             String                @id @default(uuid()) @db.Uuid
  descricao      String                @db.VarChar(255)
  valor          Int // Valor em centavos
  data           DateTime              @db.Date
  categoria      CategoriaDespesa
  formaPagamento FormaPagamentoDespesa @map("forma_pagamento")
  observacoes    String?               @db.Text
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")

  // Auditoria
  criadoPor       User    @relation("DespesaCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("DespesaUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([data])
  @@index([categoria])
  @@index([formaPagamento])
  @@map("despesas")
}

model Fornecedor {
  id          String   @id @default(uuid()) @db.Uuid
  nome        String   @db.VarChar(255)
  razaoSocial String?  @map("razao_social") @db.VarChar(255)
  cnpj        String?  @unique @db.VarChar(18)
  cpf         String?  @unique @db.VarChar(14)
  email       String?  @db.VarChar(255)
  telefone    String?  @db.VarChar(20)
  endereco    String?  @db.Text
  observacoes String?  @db.Text
  status      Status   @default(ATIVO)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  compras Compra[]

  // Auditoria
  criadoPor       User    @relation("FornecedorCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("FornecedorUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([nome])
  @@index([cnpj])
  @@index([cpf])
  @@index([status])
  @@map("fornecedores")
}

model Compra {
  id             String               @id @default(uuid()) @db.Uuid
  fornecedorId   String               @map("fornecedor_id") @db.Uuid
  numeroNota     String?              @map("numero_nota") @db.VarChar(50)
  dataCompra     DateTime             @map("data_compra") @db.Date
  dataVencimento DateTime?            @map("data_vencimento") @db.Date
  total          Int // Valor em centavos
  desconto       Int?                 @default(0) // Valor em centavos
  frete          Int?                 @default(0) // Valor em centavos
  impostos       Int?                 @default(0) // Valor em centavos
  formaPagamento FormaPagamentoCompra @map("forma_pagamento")
  status         StatusCompra         @default(PENDENTE)
  observacoes    String?              @db.Text
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  // Relacionamentos
  fornecedor Fornecedor   @relation(fields: [fornecedorId], references: [id])
  itens      ItemCompra[]

  // Auditoria
  criadoPor       User    @relation("CompraCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("CompraUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([fornecedorId])
  @@index([dataCompra])
  @@index([status])
  @@index([numeroNota])
  @@map("compras")
}

model ItemCompra {
  id            String   @id @default(uuid()) @db.Uuid
  compraId      String   @map("compra_id") @db.Uuid
  produtoId     String   @map("produto_id") @db.Uuid
  quantidade    Int
  precoUnitario Int      @map("preco_unitario") // Valor em centavos
  precoTotal    Int      @map("preco_total") // Valor em centavos
  desconto      Int?     @default(0) // Valor em centavos
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  compra  Compra  @relation(fields: [compraId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id])

  // Auditoria
  criadoPor       User    @relation("ItemCompraCreatedBy", fields: [criadoPorId], references: [id])
  criadoPorId     String  @map("criado_por_id") @db.Uuid
  atualizadoPor   User?   @relation("ItemCompraUpdatedBy", fields: [atualizadoPorId], references: [id])
  atualizadoPorId String? @map("atualizado_por_id") @db.Uuid

  @@index([compraId])
  @@index([produtoId])
  @@map("itens_compra")
}
